{"version":3,"sources":["components/Button/index.tsx","utils/zero-left.ts","utils/seconds-to-minutes.ts","components/Timer/index.tsx","sounds/bell-start.mp3","sounds/bell-finish.mp3","utils/seconds-to-time.ts","components/PomodoroTimer/index.tsx","hooks/use-interval.tsx","App.tsx","index.tsx"],"names":["Button","props","onClick","className","text","zeroLeft","n","Math","floor","toString","padStart","secondsToMinutes","seconds","min","sec","Timer","mainTime","secondsToTime","hours","PomodoroTimer","useState","pomodoroTime","setMainTime","timeCounting","setTimeCounting","working","setWorking","resting","setResting","Array","cycles","fill","cyclesQtdManager","setCyclesQtdManager","completedCycles","setCompletedCycles","fullWorkingTime","setFullWorkingTime","numberOfPomodoros","setNumberOfPomodoros","useSound","bellStart","playWorkSound","bellFinish","playRestSound","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","configureWork","useCallback","configureRest","long","longRestTime","shortRestTime","document","body","classList","add","remove","length","pop","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.75f42845.chunk.js","sourcesContent":["import React from 'react';\r\nimport './button.css';\r\n\r\ninterface Props {\r\n  text: string;\r\n  onClick?: () => void;\r\n  className?: string;\r\n}\r\n\r\nexport function Button(props: Props): JSX.Element {\r\n  return (\r\n    <button onClick={props.onClick} className={props.className}>\r\n      {props.text}\r\n    </button>\r\n  );\r\n}\r\n","const zeroLeft = (n: number) => Math.floor(n).toString().padStart(2, '0');\r\n\r\nexport { zeroLeft };\r\n","import { zeroLeft } from './zero-left';\r\n\r\nexport function secondsToMinutes(seconds: number): string {\r\n  const min = zeroLeft((seconds / 60) % 60);\r\n  const sec = zeroLeft((seconds % 60) % 60);\r\n\r\n  return `${min}:${sec}`;\r\n}\r\n","import React from 'react';\r\nimport './timer.css';\r\nimport { secondsToMinutes } from '../../utils/seconds-to-minutes';\r\n\r\ninterface Props {\r\n  mainTime: number;\r\n}\r\n\r\nexport function Timer(props: Props): JSX.Element {\r\n  return <div className=\"timer\">{secondsToMinutes(props.mainTime)}</div>;\r\n}\r\n","export default __webpack_public_path__ + \"static/media/bell-start.d01df824.mp3\";","export default __webpack_public_path__ + \"static/media/bell-finish.6b59c479.mp3\";","import { zeroLeft } from './zero-left';\r\n\r\nexport function secondsToTime(seconds: number): string {\r\n  const hours = zeroLeft(seconds / 3600);\r\n  const min = zeroLeft((seconds / 60) % 60);\r\n  const sec = zeroLeft((seconds % 60) % 60);\r\n\r\n  return `${hours}:${min}:${sec}`;\r\n}\r\n","import React, { useEffect, useState, useCallback } from 'react';\r\nimport './pomodoro-timer.css';\r\nimport useSound from 'use-sound';\r\nimport { useInterval } from '../../hooks/use-interval';\r\nimport { Button } from '../Button';\r\nimport { Timer } from '../Timer';\r\nimport bellStart from '../../sounds/bell-start.mp3';\r\nimport bellFinish from '../../sounds/bell-finish.mp3';\r\nimport { secondsToTime } from '../../utils/seconds-to-time';\r\n\r\ninterface Props {\r\n  pomodoroTime: number;\r\n  shortRestTime: number;\r\n  longRestTime: number;\r\n  cycles: number;\r\n}\r\n\r\nexport function PomodoroTimer(props: Props): JSX.Element {\r\n  const [mainTime, setMainTime] = useState(props.pomodoroTime);\r\n  const [timeCounting, setTimeCounting] = useState(false);\r\n  const [working, setWorking] = useState(false);\r\n  const [resting, setResting] = useState(false);\r\n  const [cyclesQtdManager, setCyclesQtdManager] = useState(new Array(props.cycles - 1).fill(true));\r\n\r\n  const [completedCycles, setCompletedCycles] = useState(0);\r\n  const [fullWorkingTime, setFullWorkingTime] = useState(0);\r\n  const [numberOfPomodoros, setNumberOfPomodoros] = useState(0);\r\n\r\n  const [playWorkSound] = useSound(bellStart);\r\n  const [playRestSound] = useSound(bellFinish);\r\n\r\n  //Set the interval for every second\r\n  useInterval(\r\n    () => {\r\n      setMainTime(mainTime - 1);\r\n      if (working) setFullWorkingTime(fullWorkingTime + 1);\r\n    },\r\n    timeCounting ? 1000 : null,\r\n  );\r\n\r\n  //Start the work timer\r\n  const configureWork = useCallback(() => {\r\n    setTimeCounting(true);\r\n    setResting(false);\r\n    playWorkSound();\r\n    setWorking(true);\r\n    setMainTime(props.pomodoroTime);\r\n  }, [setTimeCounting, setResting, playWorkSound, setWorking, setMainTime, props.pomodoroTime]);\r\n\r\n  //Start the rest timer, receive an argument that defines if will be a long or a short rest time.\r\n  const configureRest = useCallback(\r\n    (long: boolean) => {\r\n      setTimeCounting(true);\r\n      setWorking(false);\r\n      setResting(true);\r\n      playRestSound();\r\n\r\n      if (long) {\r\n        setMainTime(props.longRestTime);\r\n      } else {\r\n        setMainTime(props.shortRestTime);\r\n      }\r\n    },\r\n    [\r\n      setTimeCounting,\r\n      setWorking,\r\n      setResting,\r\n      playRestSound,\r\n      setMainTime,\r\n      props.longRestTime,\r\n      props.shortRestTime,\r\n    ],\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (working) document.body.classList.add('working');\r\n    if (resting) document.body.classList.remove('working');\r\n\r\n    if (mainTime > 0) return;\r\n\r\n    if (working && cyclesQtdManager.length > 0) {\r\n      configureRest(false);\r\n      cyclesQtdManager.pop();\r\n    } else if (working && cyclesQtdManager.length <= 0) {\r\n      configureRest(true);\r\n      setCyclesQtdManager(new Array(props.cycles - 1).fill(true));\r\n      setCompletedCycles(completedCycles + 1);\r\n    }\r\n\r\n    if (working) setNumberOfPomodoros(numberOfPomodoros + 1);\r\n    if (resting) configureWork();\r\n  }, [\r\n    working,\r\n    resting,\r\n    mainTime,\r\n    cyclesQtdManager,\r\n    numberOfPomodoros,\r\n    completedCycles,\r\n    configureRest,\r\n    setCyclesQtdManager,\r\n    setNumberOfPomodoros,\r\n    configureWork,\r\n    props.cycles,\r\n  ]);\r\n\r\n  return (\r\n    <div className=\"pomodoro\">\r\n      <h4>It`s time to {working ? 'work' : 'rest'}</h4>\r\n      <Timer mainTime={mainTime} />\r\n\r\n      <div className=\"controls\">\r\n        <Button text=\"Work\" onClick={() => configureWork()} />\r\n        <Button text=\"Rest\" onClick={() => configureRest(false)} />\r\n        <Button\r\n          className={!working && !resting ? 'hidden' : ''}\r\n          text={timeCounting ? 'Pause' : 'Back to work'}\r\n          onClick={() => setTimeCounting(!timeCounting)}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"details\">\r\n        <p>Completed cycles: {completedCycles}</p>\r\n        <p>Hours working: {secondsToTime(fullWorkingTime)}</p>\r\n        <p>Completed pomodoros: {numberOfPomodoros}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { useEffect, useRef } from 'react';\r\n\r\nexport function useInterval<C extends CallableFunction>(callback: C, delay: number | null): void {\r\n  const savedCallback = useRef<C>();\r\n\r\n  //Remember the latest callback\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  //Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      if (savedCallback.current) savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      const id = setInterval(tick, delay);\r\n      return () => clearInterval(id);\r\n    }\r\n  }, [delay]);\r\n}\r\n","import React from 'react';\r\nimport { PomodoroTimer } from './components/PomodoroTimer';\r\n\r\nfunction App(): JSX.Element {\r\n  return (\r\n    <div className=\"container\">\r\n      <PomodoroTimer pomodoroTime={1500} shortRestTime={300} longRestTime={900} cycles={4} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}