{"version":3,"sources":["hooks/use-interval.tsx","components/Button/index.tsx","utils/zero-left.ts","utils/seconds-to-minutes.ts","components/Timer/index.tsx","sounds/bell-start.mp3","sounds/bell-finish.mp3","store/pomodoro-state-store.tsx","components/PomodoroTimer/index.tsx","utils/seconds-to-time.ts","components/StatisticsPanel/index.tsx","App.tsx","index.tsx"],"names":["useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","Button","props","onClick","className","text","zeroLeft","n","Math","floor","toString","padStart","secondsToMinutes","seconds","min","sec","Timer","mainTime","PomodoroState","React","createContext","pomodoroState","setPomodoroState","GlobalWorkingProvider","children","value","useState","Provider","PomodoroTimer","pomodoroTime","setMainTime","wasCalled","setWasCalled","useContext","working","timeCounting","resting","setResting","Array","cycles","fill","cyclesQtdManager","setCyclesQtdManager","completedCycles","setCompletedCycles","numberOfPomodoros","setNumberOfPomodoros","useSound","bellStart","playWorkSound","bellFinish","playRestSound","configureWork","useCallback","configureRest","long","longRestTime","shortRestTime","document","body","classList","add","remove","title","length","pop","secondsToTime","hours","StatisticsPanel","fullWorkingTime","setFullWorkingTime","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.73b93700.chunk.js","sourcesContent":["import { useEffect, useRef } from 'react';\r\n\r\nexport function useInterval<C extends CallableFunction>(callback: C, delay: number | null): void {\r\n  const savedCallback = useRef<C>();\r\n\r\n  //Remember the latest callback\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  //Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      if (savedCallback.current) savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      const id = setInterval(tick, delay);\r\n      return () => clearInterval(id);\r\n    }\r\n  }, [delay]);\r\n}\r\n","import React, { ReactElement } from 'react';\r\nimport './button.css';\r\n\r\ninterface Props {\r\n  text: string | ReactElement;\r\n  onClick?: () => void;\r\n  className?: string;\r\n}\r\n\r\nexport function Button(props: Props): JSX.Element {\r\n  return (\r\n    <button onClick={props.onClick} className={props.className}>\r\n      {props.text}\r\n    </button>\r\n  );\r\n}\r\n","const zeroLeft = (n: number): string => Math.floor(n).toString().padStart(2, '0');\r\n\r\nexport { zeroLeft };\r\n","import { zeroLeft } from './zero-left';\r\n\r\nexport function secondsToMinutes(seconds: number): string {\r\n  const min = zeroLeft((seconds / 60) % 60);\r\n  const sec = zeroLeft((seconds % 60) % 60);\r\n\r\n  return `${min}:${sec}`;\r\n}\r\n","import React from 'react';\r\nimport './timer.css';\r\nimport { secondsToMinutes } from '../../utils/seconds-to-minutes';\r\n\r\ninterface Props {\r\n  mainTime: number;\r\n}\r\n\r\nexport function Timer(props: Props): JSX.Element {\r\n  return <div className=\"timer\">{secondsToMinutes(props.mainTime)}</div>;\r\n}\r\n","export default __webpack_public_path__ + \"static/media/bell-start.d01df824.mp3\";","export default __webpack_public_path__ + \"static/media/bell-finish.6b59c479.mp3\";","import React, { SetStateAction, useState } from 'react';\r\n\r\nexport interface PomodoroStateInterface {\r\n  working: boolean;\r\n  timeCounting: boolean;\r\n}\r\n\r\nexport const PomodoroState = React.createContext({\r\n  pomodoroState: {} as Partial<PomodoroStateInterface>,\r\n  setPomodoroState: {} as React.Dispatch<SetStateAction<Partial<PomodoroStateInterface>>>,\r\n});\r\n\r\ninterface IStore {\r\n  children: React.ReactNode;\r\n  value?: Partial<PomodoroStateInterface>;\r\n}\r\n\r\nconst GlobalWorkingProvider = ({\r\n  children,\r\n  value = {} as PomodoroStateInterface,\r\n}: IStore): React.ReactElement => {\r\n  const [pomodoroState, setPomodoroState] = useState(value);\r\n\r\n  return (\r\n    <PomodoroState.Provider value={{ pomodoroState, setPomodoroState }}>\r\n      {children}\r\n    </PomodoroState.Provider>\r\n  );\r\n};\r\n\r\nexport default GlobalWorkingProvider;\r\n","import React, { useEffect, useState, useCallback, useContext } from 'react';\r\nimport { FaPlay, FaPause, FaUndo } from 'react-icons/fa';\r\nimport { MdSnooze } from 'react-icons/md';\r\nimport './pomodoro-timer.css';\r\nimport useSound from 'use-sound';\r\nimport { useInterval } from '../../hooks/use-interval';\r\nimport { Button } from '../Button';\r\nimport { Timer } from '../Timer';\r\nimport bellStart from '../../sounds/bell-start.mp3';\r\nimport bellFinish from '../../sounds/bell-finish.mp3';\r\nimport { secondsToMinutes } from '../../utils/seconds-to-minutes';\r\nimport { PomodoroState } from '../../store/pomodoro-state-store';\r\n\r\ninterface Props {\r\n  pomodoroTime: number;\r\n  shortRestTime: number;\r\n  longRestTime: number;\r\n  cycles: number;\r\n}\r\n\r\nexport function PomodoroTimer(props: Props): JSX.Element {\r\n  const [mainTime, setMainTime] = useState(props.pomodoroTime);\r\n  const [wasCalled, setWasCalled] = useState(0);\r\n  const { pomodoroState, setPomodoroState } = useContext(PomodoroState);\r\n  const { working, timeCounting } = pomodoroState;\r\n  const [resting, setResting] = useState(false);\r\n\r\n  const [cyclesQtdManager, setCyclesQtdManager] = useState(new Array(props.cycles - 1).fill(true));\r\n  const [completedCycles, setCompletedCycles] = useState(0);\r\n\r\n  const [numberOfPomodoros, setNumberOfPomodoros] = useState(0);\r\n\r\n  const [playWorkSound] = useSound(bellStart);\r\n  const [playRestSound] = useSound(bellFinish);\r\n\r\n  //Set the interval for every second\r\n  useInterval(\r\n    () => {\r\n      setMainTime(mainTime - 1);\r\n    },\r\n    timeCounting ? 1000 : null,\r\n  );\r\n\r\n  //Start the work timer\r\n  const configureWork = useCallback(() => {\r\n    setResting(false);\r\n    playWorkSound();\r\n    setPomodoroState({ working: true, timeCounting: true });\r\n    setMainTime(props.pomodoroTime);\r\n  }, [setResting, playWorkSound, setPomodoroState, setMainTime, props.pomodoroTime]);\r\n\r\n  const startButtonHandler = () => {\r\n    if (wasCalled === 0) {\r\n      configureWork();\r\n      setWasCalled(1);\r\n    } else {\r\n      setPomodoroState({ working: working, timeCounting: !timeCounting });\r\n    }\r\n  };\r\n\r\n  //Start the rest timer, receive an argument that defines if will be a long or a short rest time.\r\n  const configureRest = useCallback(\r\n    (long: boolean) => {\r\n      setPomodoroState({ working: false, timeCounting: true });\r\n      setResting(true);\r\n      playRestSound();\r\n\r\n      if (long) {\r\n        setMainTime(props.longRestTime);\r\n      } else {\r\n        setMainTime(props.shortRestTime);\r\n      }\r\n    },\r\n    [setResting, playRestSound, setMainTime, props.longRestTime, props.shortRestTime],\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (working) document.body.classList.add('working');\r\n    if (resting) document.body.classList.remove('working');\r\n\r\n    if (working || resting)\r\n      document.title = `${secondsToMinutes(mainTime)} - ${\r\n        working ? 'Time to work' : 'Time to rest'\r\n      } `;\r\n\r\n    if (mainTime > 0) return;\r\n\r\n    if (working && cyclesQtdManager.length > 0) {\r\n      configureRest(false);\r\n      cyclesQtdManager.pop();\r\n    } else if (working && cyclesQtdManager.length <= 0) {\r\n      configureRest(true);\r\n      setCyclesQtdManager(new Array(props.cycles - 1).fill(true));\r\n      setCompletedCycles(completedCycles + 1);\r\n    }\r\n\r\n    if (working) setNumberOfPomodoros(numberOfPomodoros + 1);\r\n    if (resting) configureWork();\r\n  }, [\r\n    working,\r\n    resting,\r\n    mainTime,\r\n    cyclesQtdManager,\r\n    numberOfPomodoros,\r\n    completedCycles,\r\n    configureRest,\r\n    setCyclesQtdManager,\r\n    setNumberOfPomodoros,\r\n    configureWork,\r\n    props.cycles,\r\n  ]);\r\n\r\n  return (\r\n    <div className=\"pomodoro\">\r\n      <h4>It's time to {working ? 'work' : 'rest'}</h4>\r\n      <Timer mainTime={mainTime} />\r\n\r\n      <div className=\"controls\">\r\n        <Button\r\n          text={<MdSnooze className=\"react-icons\" />}\r\n          onClick={() => configureRest(false)}\r\n        ></Button>\r\n        <Button\r\n          className=\"main-btn\"\r\n          text={\r\n            !timeCounting ? <FaPlay className=\"react-icons\" /> : <FaPause className=\"react-icons\" />\r\n          }\r\n          onClick={() => startButtonHandler()}\r\n        />\r\n        <Button text={<FaUndo className=\"react-icons\" />} onClick={() => configureWork()}></Button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { zeroLeft } from './zero-left';\r\n\r\nexport function secondsToTime(seconds: number): string {\r\n  const hours = zeroLeft(seconds / 3600);\r\n  const min = zeroLeft((seconds / 60) % 60);\r\n  const sec = zeroLeft((seconds % 60) % 60);\r\n\r\n  return `${hours}:${min}:${sec}`;\r\n}\r\n","import React, { useContext, useState } from 'react';\r\nimport { secondsToTime } from '../../utils/seconds-to-time';\r\nimport { useInterval } from '../../hooks/use-interval';\r\nimport { PomodoroState } from '../../store/pomodoro-state-store';\r\nimport './statistics.css';\r\n\r\nexport function StatisticsPanel(): JSX.Element {\r\n  const { pomodoroState } = useContext(PomodoroState);\r\n  const [fullWorkingTime, setFullWorkingTime] = useState(0);\r\n  const { working, timeCounting } = pomodoroState;\r\n\r\n  useInterval(\r\n    () => {\r\n      if (working) setFullWorkingTime(fullWorkingTime + 1);\r\n    },\r\n    timeCounting ? 1000 : null,\r\n  );\r\n\r\n  return (\r\n    <div className=\"statistics-panel\">\r\n      <div className=\"statistic-single\">\r\n        <p>Time working</p>\r\n        <span className=\"statistic-data\">{secondsToTime(fullWorkingTime)}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { PomodoroTimer } from './components/PomodoroTimer';\r\nimport { StatisticsPanel } from './components/StatisticsPanel';\r\nimport GlobalWorkingProvider from './store/pomodoro-state-store';\r\n\r\nfunction App(): JSX.Element {\r\n  return (\r\n    <GlobalWorkingProvider>\r\n      <div className=\"container\">\r\n        <StatisticsPanel />\r\n        <PomodoroTimer pomodoroTime={1500} shortRestTime={300} longRestTime={900} cycles={4} />\r\n      </div>\r\n    </GlobalWorkingProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}